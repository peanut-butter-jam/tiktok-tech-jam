/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login With Email
         * @description Placeholder for login endpoint.
         */
        post: operations["login_with_email_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulations/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Regulation File */
        post: operations["upload_regulation_file_regulations_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Regulations
         * @description Get all regulations.
         */
        get: operations["get_regulations_regulations__get"];
        put?: never;
        /**
         * Upload Regulation
         * @description Create a new regulation.
         */
        post: operations["upload_regulation_regulations__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regulations/{regulation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Regulation
         * @description Get a regulation by ID.
         */
        get: operations["get_regulation_regulations__regulation_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Features
         * @description Get all features.
         */
        get: operations["get_features_features__get"];
        put?: never;
        /**
         * Upload Feature
         * @description Create a new feature.
         */
        post: operations["upload_feature_features__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{feature_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feature
         * @description Get a feature by ID.
         */
        get: operations["get_feature_features__feature_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Feature By Id
         * @description Delete a feature by ID.
         */
        delete: operations["delete_feature_by_id_features__feature_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{feature_id}/checks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Feature Check
         * @description Create a new check for a feature.
         */
        post: operations["create_feature_check_features__feature_id__checks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_regulation_file_regulations_file_post */
        Body_upload_regulation_file_regulations_file_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** CheckDTO */
        CheckDTO: {
            /** Id */
            id: number;
            status: components["schemas"]["Status"];
            eval_result: components["schemas"]["EvalResultDTO"] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** EvalResultDTO */
        EvalResultDTO: {
            /** @description Whether the feature requires geo-specific compliance logic. 'yes' = requires geo-specific logic; 'no' = does not; 'unknown' = insufficient evidence. */
            flag: components["schemas"]["FlagType"];
            /**
             * Require Human Review
             * @description Whether human review is required for this evaluation.
             */
            require_human_review: boolean;
            /**
             * Confidence
             * @description Confidence score (0.0-1.0) based strictly on input evidence.
             */
            confidence: number;
            /**
             * Reasoning
             * @description Concise, audit-ready explanation supporting the decision.
             */
            reasoning: string;
            /**
             * Recommended Actions
             * @description Suggested next steps for engineering/legal.
             */
            recommended_actions?: string[];
            /**
             * Rou Ids
             * @description List of ROU (Regulatory Obligation Unit) IDs that were matched or considered relevant.
             */
            rou_ids?: number[];
            /**
             * Missing Information
             * @description Explicit items or clarifications required to resolve uncertainty.
             */
            missing_information?: string[];
        };
        /**
         * FeatureCreateDTO
         * @description Data Transfer Object for creating a Feature
         */
        FeatureCreateDTO: {
            /**
             * Title
             * @description The name of the feature
             */
            title: string;
            /**
             * Description
             * @description A brief description of the feature
             */
            description: string;
        };
        /**
         * FeatureDTOWithCheck
         * @description Data Transfer Object for Feature
         */
        FeatureDTOWithCheck: {
            /**
             * Title
             * @description The name of the feature
             */
            title: string;
            /**
             * Description
             * @description A brief description of the feature
             */
            description: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Checks
             * @description List of associated checks for this feature
             */
            checks: components["schemas"]["CheckDTO"][];
            readonly latest_check: components["schemas"]["CheckDTO"] | null;
        };
        /**
         * FlagType
         * @enum {string}
         */
        FlagType: "yes" | "no" | "unknown";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * RegulationCreateDTO
         * @description DTO for creating a new Regulation
         */
        RegulationCreateDTO: {
            /** Title */
            title: string;
            /**
             * File Object Id
             * Format: uuid
             */
            file_object_id: string;
        };
        /**
         * RegulationDTO
         * @description Data Transfer Object for Regulation
         */
        RegulationDTO: {
            /** Title */
            title: string;
            /**
             * File Object Id
             * Format: uuid
             */
            file_object_id: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Rous */
            rous: components["schemas"]["RouDto"][] | null;
        };
        /**
         * RouDto
         * @description Base class for all Regulatory Obligation Unit (ROU) DTOs.
         *
         *     Attributes:
         *         id: The unique identifier for the ROU
         *         type: The type of the ROU (human or AI)
         *         canonical_text: The canonical text of the ROU
         *         obligations: A list of obligations associated with the ROU
         *         jurisdiction: The jurisdiction of the ROU
         *         source_id: The source ID of the ROU
         *         created_at: The creation date of the ROU
         */
        RouDto: {
            /** Id */
            id: number;
            type: components["schemas"]["RouType"];
            /**
             * Canonical Text
             * @description The key regulatory requirement in concise form
             */
            canonical_text: string;
            /**
             * Desc
             * @description A short human-friendly description of the ROU
             */
            desc: string;
            /**
             * Obligations
             * @description The specific actions or duties required
             */
            obligations: string[];
            /**
             * Jurisdiction
             * @description The country or region this ROU applies to
             */
            jurisdiction: string;
            /**
             * Source Id
             * @description The source ID of the ROU
             */
            source_id: number;
            /**
             * Created At
             * Format: date-time
             * @description The creation date of the ROU
             */
            created_at: string;
        };
        /**
         * RouType
         * @description Enumeration for Regulation Obligation Unit (ROU) types.
         * @enum {string}
         */
        RouType: "human" | "ai";
        /**
         * Status
         * @description Enumeration for the status of a Check.
         * @enum {string}
         */
        Status: "pending" | "completed" | "failed";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_with_email_auth_login_post: {
        parameters: {
            query: {
                email: string;
                password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_regulation_file_regulations_file_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_regulation_file_regulations_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_regulations_regulations__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegulationDTO"][];
                };
            };
        };
    };
    upload_regulation_regulations__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegulationCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegulationDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_regulation_regulations__regulation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                regulation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegulationDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_features_features__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureDTOWithCheck"][];
                };
            };
        };
    };
    upload_feature_features__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeatureCreateDTO"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureDTOWithCheck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feature_features__feature_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feature_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureDTOWithCheck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_feature_by_id_features__feature_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feature_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_feature_check_features__feature_id__checks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feature_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
